local module = {
	PlaceWayPoints = false,
	Humanoid = game.Players.LocalPlayer.Character:WaitForChild("Humanoid"),
	WaitPerWaypoint = 0.035,
}
local PathFinder = game:GetService("PathfindingService")
local Humanoid = module.Humanoid
local WayPointTable = {}
local AbleToPath = true
function createParts(pos:Vector3)
	local part = Instance.new("Part",game.Workspace)
	part.Size = Vector3.new(0.5,0.5,0.5)
	part.Material = Enum.Material.Neon
	part.Shape = Enum.PartType.Ball
	part.Position = pos
	part.Name = "WayPointPart"
	part.Anchored = true
	part.CanCollide = false
end
function module:ClearWayPoints()
	table.clear(WayPointTable)
	for i,v in pairs(game:GetService("Workspace"):GetChildren()) do
		if v.Name == "WayPointPart" then
			v:Destroy()
		end
	end
end
function module:stopPath()
	AbleToPath = false
	module:ClearWayPoints()
end
function Path(vector3:Vector3)
    module:ClearWayPoints()
	local path = PathFinder:CreatePath({
		["AgentCanClimb"] = true,
		["AgentCanJump"] = true,
		["Costs"] = {
			Water = 20
		}
	})

	path:ComputeAsync(Humanoid.RootPart.Position,vector3)
	local waypoints = path:GetWaypoints()
	if path.Status == Enum.PathStatus.Success then
		AbleToPath = true
		if Humanoid.Health == 0 then
			ClearWayPoints()
		end
		for i,waypoint in pairs(waypoints) do
			if waypoint then
			    if module.PlaceWayPoints == true then
				    createParts(waypoint.Position)
				end
				table.insert(WayPointTable,waypoint)
			else
				continue
			end
		end
		for i,waypoint in pairs(WayPointTable) do
			if waypoint then
				if waypoint.Action == Enum.PathWaypointAction.Jump then
					Humanoid.Jump = true
				end

				Humanoid:MoveTo(waypoint.Position)
				if waypoint.Action == Enum.PathWaypointAction.Jump then
					Humanoid.Jump = true
				end
				Humanoid.MoveToFinished:Wait(2)
				if waypoint.Action == Enum.PathWaypointAction.Jump then
					Humanoid.Jump = true
				end
				if AbleToPath == false then
					break
				end
				wait(module.WaitPerWaypoint)
				continue

			else
				continue
			end

		end
		module:ClearWayPoints()
		return path
	else
		print('path unsuccessful')
	end

end
function module:WalkAsync(Pos)
	spawn(function()
		local a = Path(Pos)

		if (Humanoid.RootPart.Position-Pos).Magnitude > 5 then
			repeat module:stopPath() Path(Pos) until (Humanoid.RootPart.Position-Pos).Magnitude < 5

		end

	end)

end
function module:Walk(Pos)

	local a = Path(Pos)

	if (Humanoid.RootPart.Position-Pos).Magnitude > 5 and a.Status == Enum.PathStatus.Success then
		repeat module:stopPath() Path(Pos) until (Humanoid.RootPart.Position-Pos).Magnitude < 5

	end



end
function module:TestForAbility2()
    print("Successfully loaded 3443")
    print("ARGS: PlaceWayPoints: "..tostring(module.PlaceWayPoints).." Humanoid: "..tostring(module.Humanoid:GetFullName()).." WaitPerWaypoint"..tostring(module.WaitPerWaypoint).."s All functions and module table length: "..tostring(table.getn(module)))
end
function module:Test()
    module:TestForAbility2()
    print("Successfully loaded path")
    module:Walk(module.Humanoid.RootPart.Position + Vector3.new(10,0,10))
end
--[[
local module = loadstring(game:HttpGet("https://raw.githubusercontent.com/x203f/RBXPathFinder/main/main/PathFinder",true))()
for i,v in pairs(game.Players:GetPlayers()) do
    module:Walk(module.Humanoid.RootPart.Position + Vector3.new(v.Character.Humanoid.RootPart.Position.X,0,v.Character.Humanoid.RootPart.Position.Z))
end

local module = loadstring(game:HttpGet("https://raw.githubusercontent.com/x203f/RBXPathFinder/main/main/PathFinder",true))()
module.PlaceWayPoints = false
module.WaitPerWaypoint = 0
module:Walk(module.Humanoid.RootPart.Position + Vector3.new(-50,0,50))

--]]
return module